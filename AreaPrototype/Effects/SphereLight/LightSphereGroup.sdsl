shader LightSphereGroup<int TMaxLightCount> :
    LTC,
    Transformation,
    DirectLightGroupPerDraw,    // Required for "PrepareDirectLightCore()", "PrepareDirectLight()", "ComputeAttenuation()" and other stuff.
    LightSphere  // Required for "SphereLightData".
    // LightSphereAttenuationDefault    // Required for "ComputeAttenuation()"
{
    cbuffer PerDraw.Lighting
    {
        SphereLightData Lights[TMaxLightCount];
    }

    override int GetMaxLightCount()
    {
        return TMaxLightCount;
    }

    /// <summary>
    /// Compute the light color/direction for the specified index within this group
    /// </summary>
    override void PrepareDirectLightCore(int lightIndex)
    {
        // TODO: Workaraound for SPIR-V compiler. Revert later
        SphereLightDataInternal data;
        data.PositionWS = Lights[lightIndex].PositionWS;
        data.DirectionWS = Lights[lightIndex].DirectionWS;
        data.Radius = Lights[lightIndex].Radius;
        data.Color = Lights[lightIndex].Color;

        ProcessLight(data);
    }

    override float ComputeAttenuation(float3 position, int lightIndex)
    {
        // TODO: Workaraound for SPIR-V compiler. Revert later
        SphereLightDataInternal data;
        data.PositionWS = Lights[lightIndex].PositionWS;
        data.DirectionWS = Lights[lightIndex].DirectionWS;
        data.Radius = Lights[lightIndex].Radius;

        float3 lightVectorNorm;
        return ComputeAttenuation(data, position, lightVectorNorm);
        // return 5;
    }
    /// <summary>
    /// Compute the light color/direction for the specified index within this group
    /// </summary>
    override void PrepareDirectLight(int lightIndex)
    {
        PrepareDirectLightCore(lightIndex);


        SphereLightDataInternal light = Lights[lightIndex];

        float3 lunormalized = light.PositionWS - streams.PositionWS;

        float3 L = normalize(lunormalized);
        float sqrDistance = dot(lunormalized, lunormalized);

        float sqrLightRadius = light.Radius * light.Radius;

        float illuminance = PI * (sqrLightRadius/(max(sqrLightRadius,sqrDistance))) * saturate(dot(streams.normalWS, L));

        // Compute NdotL
        streams.NdotL = max(dot(streams.normalWS, streams.lightDirectionWS), 0.0001f);

        // // Computes the shadowColor
        streams.shadowColor = ComputeShadow(streams.PositionWS.xyz, lightIndex);

        // // Compute the final color with NdotL
        streams.lightColorNdotL = streams.lightColor * illuminance * streams.shadowColor * streams.NdotL * streams.lightDirectAmbientOcclusion;
        streams.lightSpecularColorNdotL = streams.lightColorNdotL;

        // Mask the light by the color of the projected texture:
        streams.lightColorNdotL *= ComputeTextureProjection(streams.PositionWS.xyz, lightIndex);    // TODO: Modify "streams.lightColor" instead?

        
        float3 reflectionVectorWS = reflect(-streams.viewWS, streams.normalWS);
        streams.lightSpecularColorNdotL *= ComputeSpecularTextureProjection(streams.PositionWS.xyz, reflectionVectorWS, lightIndex);
    }
};